# 쿠버네티스

## 1. 개요

쿠버네티스(Kubernetes)는 컨테이너화된 애플리케이션의 배포, 확장 및 관리를 자동화하는 오픈소스 플랫폼입니다. Spring Boot는 자바 기반의 마이크로서비스 개발을 위한 강력한 프레임워크입니다. 이 두 기술을 결합하면 확장 가능하고 유지보수가 용이한 클라우드 네이티브 애플리케이션을 구축할 수 있습니다.

## 2. Spring Boot 애플리케이션 컨테이너화

### 2.1 Dockerfile 작성

Spring Boot 애플리케이션을 컨테이너화하기 위해 Dockerfile을 작성합니다:

```dockerfile
FROM openjdk:11-jre-slim
VOLUME /tmp
ARG JAR_FILE=target/*.jar
COPY ${JAR_FILE} app.jar
ENTRYPOINT ["java","-jar","/app.jar"]
```

### 2.2 이미지 빌드

다음 명령으로 Docker 이미지를 빌드합니다:

```bash
docker build -t myapp:v1 .
```

## 3. 쿠버네티스 배포 구성

### 3.1 Deployment YAML 작성

`deployment.yaml` 파일을 생성하여 쿠버네티스 Deployment를 정의합니다:

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: myapp-deployment
spec:
  replicas: 3
  selector:
    matchLabels:
      app: myapp
  template:
    metadata:
      labels:
        app: myapp
    spec:
      containers:
      - name: myapp
        image: myapp:v1
        ports:
        - containerPort: 8080
```

### 3.2 Service YAML 작성

애플리케이션을 외부에 노출하기 위한 `service.yaml` 파일을 작성합니다:

```yaml
apiVersion: v1
kind: Service
metadata:
  name: myapp-service
spec:
  selector:
    app: myapp
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080
  type: LoadBalancer
```

## 4. 쿠버네티스에 배포

다음 명령으로 애플리케이션을 쿠버네티스 클러스터에 배포합니다:

```bash
kubectl apply -f deployment.yaml
kubectl apply -f service.yaml
```

## 5. Spring Boot 애플리케이션의 쿠버네티스 친화적 설정

### 5.1 헬스 체크 엔드포인트 추가

`application.properties` 파일에 다음 설정을 추가합니다:

```properties
management.endpoint.health.probes.enabled=true
management.health.livenessState.enabled=true
management.health.readinessState.enabled=true
```

### 5.2 Deployment에 헬스 체크 추가

`deployment.yaml` 파일의 컨테이너 섹션에 다음을 추가합니다:

```yaml
livenessProbe:
  httpGet:
    path: /actuator/health/liveness
    port: 8080
readinessProbe:
  httpGet:
    path: /actuator/health/readiness
    port: 8080
```

## 6. 환경 설정 관리

### 6.1 ConfigMap 사용

`configmap.yaml` 파일을 생성합니다:

```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: myapp-config
data:
  application.properties: |
    spring.datasource.url=jdbc:mysql://mysql-service:3306/mydb
    spring.datasource.username=root
    spring.datasource.password=secret
```

### 6.2 Deployment에 ConfigMap 마운트

`deployment.yaml` 파일에 다음을 추가합니다:

```yaml
volumes:
  - name: config
    configMap:
      name: myapp-config
containers:
  - name: myapp
    volumeMounts:
      - name: config
        mountPath: /app/config
```

## 7. 로깅 및 모니터링

Spring Boot Actuator와 Prometheus, Grafana를 활용하여 애플리케이션 모니터링을 설정할 수 있습니다.

이러한 방식으로 Spring Boot 애플리케이션을 쿠버네티스에 통합하면, 확장성, 관리 용이성, 그리고 클라우드 네이티브 아키텍처의 이점을 모두 활용할 수 있습니다.