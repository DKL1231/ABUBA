## Apache Kafka

대규모 데이터 스트리밍을 처리하기 위해 널리 사용되는 분산 이벤트 스트리밍 플랫폼

### 특징

1. **분산 시스템**: Kafka는 여러 대의 서버(브로커)로 구성된 클러스터에서 동작, 데이터의 복제 및 분산 처리 지원
2. **높은 처리 성능** 
3. **내결함성(Fault Tolerance)**: 데이터는 여러 브로커에 복제되어 저장되므로, 하나의 브로커가 장애가 발생해도 데이터 손실 없이 지속적으로 서비스를 제공할 수 있다.
4. **확장성**: Kafka 클러스터는 필요에 따라 쉽게 확장할 수 있으며, 노드를 추가함으로써 처리 능력을 증가시킬 수 있다.
5. **내구성(Durability)**: 메시지는 디스크에 안전하게 저장되며, 설정에 따라 일정 기간 동안 보관되어 데이터 손실 위험을 줄일 수 있다.
6. **메시지 재생 가능**: Kafka의 소비자는 메시지를 반복적으로 읽을 수 있어, 데이터 재처리가 용이하다.

### Kafka의 장점

1. **대용량 데이터 처리**: Kafka는 대규모 데이터를 실시간으로 처리 및 전달할 수 있는 능력이 뛰어나, 데이터 스트리밍 및 로그 수집 등에 적합하다.
2. **높은 신뢰성**: 데이터가 분산되고 복제되기 때문에, 장애 상황에서도 데이터 손실 없이 안정적인 서비스를 제공한다.
3. **유연한 소비자 모델**: Kafka의 소비자 그룹을 사용하면 여러 소비자가 같은 데이터를 동시에 처리할 수 있다. 이는 병렬 처리 및 확장성에 유리하다.
4. **다양한 사용 사례**: Kafka는 로그 수집, 실시간 이벤트 스트리밍, 메세지 큐, 데이터 파이프라인 등 다양한 시나리오에 적용할 수 있다.
5. **강력한 커뮤니티 및 생태계**: Kafka는 오픈 소스 프로젝트로 활발한 커뮤니티와 다양한 도구 및 플러그인을 지원받고 있다.

### Kafka의 단점

1. **복잡성**: Kafka를 설정하고 관리하는 데는 전문성이 요구된다.
2. **데이터 지연(latency)**: 실시간 처리가 가능하지만, 특정 사용 사례에서는 지연 시간이 발생할 수 있다.
3. **운영 비용**: 분산 시스템으로 구성되어 있어, 운영 및 유지 보수에 상당한 리소스가 필요할 수 있다.
4. **메시지 순서 보장 어려움**: Kafka는 파티션 단위로 메시지 순서를 보장하지만, 여러 파티션에 메시지가 분산될 경우 전체 메시지 순서를 보장하는 데 어려움이 있을 수 있다.

### Kafka를 사용하는 이유

1. **실시간 데이터 스트리밍**: 실시간으로 대규모 데이터를 처리하고, 이 데이터를 여러 소비자에게 동시에 전달해야 하는 경우에 매우 적합하다.
2. **데이터 통합**: 여러 데이터 소스에서 데이터를 수집하여 실시간으로 통합하고 분석하는 시스템에서 사용하면 효과적이다.
3. **로그 수집 및 분석**: 다양한 애플리케이션의 로그 데이터를 실시간으로 수집하고 중앙에서 관리 및 분석하기 위한 목적으로 많이 사용된다.
4. **분산 메시징 시스템**: 시스템 간에 신뢰성 있는 메시지 전달이 필요한 경우 높은 신뢰성과 확장성을 제공한다.
5. **데이터 파이프라인 구축**: 데이터 파이프라인의 중심에서 데이터를 수집, 처리, 저장하는 역할을 하며, 다양한 처리 시스템과 연계해 데이터를 이동시킬 수 있다.